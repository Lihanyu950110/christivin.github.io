<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>徐盛的博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-05-10T11:17:19.972Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>徐盛</name>
    <email>544915551@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>深入学习JAVA虚拟机（一）</title>
    <link href="http://yoursite.com/2017/01/03/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JAVA%E8%99%9A%E6%8B%9F%E6%9C%BA%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2017/01/03/深入理解JAVA虚拟机（一）/</id>
    <published>2017-01-03T12:11:32.000Z</published>
    <updated>2017-05-10T11:17:19.972Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深入学习JAVA虚拟机（一）"><a href="#深入学习JAVA虚拟机（一）" class="headerlink" title="深入学习JAVA虚拟机（一）"></a>深入学习JAVA虚拟机（一）</h1><h2 id="–java内存区域与内存溢出异常"><a href="#–java内存区域与内存溢出异常" class="headerlink" title="–java内存区域与内存溢出异常"></a>–java内存区域与内存溢出异常</h2><hr>
<p><strong>本章主要内容</strong></p>
<ul>
<li>运行时数据区域</li>
</ul>
<hr>
<h3 id="运行时数据区域"><a href="#运行时数据区域" class="headerlink" title="运行时数据区域"></a>运行时数据区域</h3><p>Java虚拟机在执行Java程序的过程中会把他所管理的内存划分成若干不同的数据区域。<br>  <img src="http://oppqlui3e.bkt.clouddn.com/%E6%95%B0%E6%8D%AE%E5%8C%BA%E5%9F%9F.png" alt=""></p>
<p>  　　这些区域都有各自的用途，以及创建和销毁的时间，有的区域随着虚拟机进程的启动而存在，有些区域则是依赖用户线程的启动和结束而建立和销毁。<br><a id="more"></a></p>
<h4 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a><strong>程序计数器</strong></h4><p>　　程序计数器(Program Counter Register) 是一块较小的内存空间，它的作用可以看做是当前线程所执行的字节码的行号指示器。在虚拟机的概念模型中，字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，<strong>分支、循环、跳转、异常处理、线程恢复等</strong>基础功能都需要依赖这个计数器来完成。</p>
<ul>
<li>Java虚拟机的多线程通过轮流切换并分配处理器执行时间实现。</li>
<li>在任何一个确定的时刻，一个处理器只会执行一条线程的指令。</li>
<li>每个线程都有一个独立的程序计数器，线程切换后，找到正确的执行位置。</li>
<li>各线程之间的计数器独立存储。</li>
</ul>
<p>　　如果线程正在执行的是一个Java方法，这个计数器记录的时正在执行的虚拟机字节码指令的地址；如果正在执行的是<strong>Native方法</strong>，这个计数器的值为空。此内存区域是唯一个在Java虚拟机规范中没有规定任何OutOfMemoryError情况的区域。</p>
<h4 id="Java虚拟机栈"><a href="#Java虚拟机栈" class="headerlink" title="Java虚拟机栈"></a><strong>Java虚拟机栈</strong></h4><p>　　与程序计数器一样，Java虚拟机栈(Java Virtual Machine Stacks)也是线程私有的，它的生命周期与线程相同。它描述的Java方法执行的内存模型。</p>
<ul>
<li>每个方法被执行的时候会创建一个栈帧(Stack Frame)。</li>
<li>栈帧用于存储局部变量表、操作栈、动态链接、方法出口等信息。</li>
<li>方法从被调用到执行完成对应着一个栈帧在虚拟机栈中入站到出站的过程。</li>
</ul>
<p>通常最关注的、与对象内存分配关系最密切的内存区就是<strong>虚拟机栈</strong>（局部变量表）和<strong>Java堆</strong>。<br><strong>局部变量表</strong>存放了编译器可知的各种基本数据类型：</p>
<ul>
<li>byte (1 Slot)</li>
<li>short(1 Slot)</li>
<li>int(1 Slot)</li>
<li>char(1 Slot)</li>
<li>float(1 Slot)</li>
<li>long(2 Slot)</li>
<li>double(2 Slot)</li>
<li>boolean(1 Slot)</li>
</ul>
<p>　　其中64位长度的long 和double类型的数据会占用2个局部变量空间(Slot),其余的只占一个。<br>　　局部变量表所需的内存空间<strong>在编译期间完成分配</strong>，进入一个方法时，这个方法需要在帧中<strong>分配多大的局部变量空间是完全确定的</strong>，在方法运行期间不会改变局部变量表的大小。</p>
<h4 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a><strong>本地方法栈</strong></h4><p>　　与虚拟机栈的作用类似，虚拟机栈为虚拟机执行<strong>Java方法</strong>（字节码）服务，本地方法栈为虚拟机的<strong>Native方法</strong>服务。具体的虚拟机可以自由实现本地方法栈。</p>
<h4 id="Java栈"><a href="#Java栈" class="headerlink" title="Java栈"></a><strong>Java栈</strong></h4><ul>
<li>Java堆(Java Heap)是Java虚拟机所管理的内存中最大的一块。</li>
<li>Java堆被<strong>所有线程共享</strong>的一块内存区域，在虚拟机启动时创建。</li>
<li>此内存区域唯一目的就是<strong>存放对象实例</strong>。</li>
<li>Java堆是垃圾收集器管理的主要区域。</li>
<li>Java堆只要求逻辑上连续，可以处于物理上不连续的内存空间中。</li>
</ul>
<h4 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a><strong>方法区</strong></h4><ul>
<li>方法区(Method Area) 与Java堆一样，是个各线程共享的内存区域。</li>
<li>用于存储已被虚拟机加载的<strong>类信息、常量、静态变量、即时编译器编译后的代码</strong>等数据。</li>
<li>不需要连续的内存，还可以选择不实现垃圾收集。</li>
<li>这个区域的内存回收目标主要是<strong>针对常量池的回收</strong>和对<strong>类型的卸载</strong>。</li>
</ul>
<h4 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a><strong>运行时常量池</strong></h4><ul>
<li>运行时常量池(Runtime Constant Pool)是方法区的一部分。</li>
<li>用于存放<strong>编译期</strong>生成的各种<strong>字面量</strong>和<strong>符号引用</strong>，这部分内容将在类加载后存放到方法区的运行时常量池中。</li>
<li>运行时常量池具备动态性，即运行期间也可能将新的常量放入池中，例如String类的intern()方法。</li>
<li>当常量池无法再申请到内存时会抛出OutOfMemoryError异常。</li>
</ul>
<h4 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a><strong>直接内存</strong></h4><ul>
<li>不属于虚拟机运行时数据区的一部分，也不是虚拟机规范中定义的内存区域，但是被频繁使用。</li>
<li>本机直接内存的分配不受到Java堆大小的限制，但是会受到本机总内存(RAM及SWAP区或分页文件)的大小及处理器寻址空间的限制。服务器管理员配置虚拟机参数时一般会根据实际内存设置-Xmx等参数信息，但是经常忽略直接内存，使得各个内存区域的总和大于物理内存限制，导致动态扩展时出现OutOfMemoryError异常。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;深入学习JAVA虚拟机（一）&quot;&gt;&lt;a href=&quot;#深入学习JAVA虚拟机（一）&quot; class=&quot;headerlink&quot; title=&quot;深入学习JAVA虚拟机（一）&quot;&gt;&lt;/a&gt;深入学习JAVA虚拟机（一）&lt;/h1&gt;&lt;h2 id=&quot;–java内存区域与内存溢出异常&quot;&gt;&lt;a href=&quot;#–java内存区域与内存溢出异常&quot; class=&quot;headerlink&quot; title=&quot;–java内存区域与内存溢出异常&quot;&gt;&lt;/a&gt;–java内存区域与内存溢出异常&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;本章主要内容&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运行时数据区域&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&quot;运行时数据区域&quot;&gt;&lt;a href=&quot;#运行时数据区域&quot; class=&quot;headerlink&quot; title=&quot;运行时数据区域&quot;&gt;&lt;/a&gt;运行时数据区域&lt;/h3&gt;&lt;p&gt;Java虚拟机在执行Java程序的过程中会把他所管理的内存划分成若干不同的数据区域。&lt;br&gt;  &lt;img src=&quot;http://oppqlui3e.bkt.clouddn.com/%E6%95%B0%E6%8D%AE%E5%8C%BA%E5%9F%9F.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;  　　这些区域都有各自的用途，以及创建和销毁的时间，有的区域随着虚拟机进程的启动而存在，有些区域则是依赖用户线程的启动和结束而建立和销毁。&lt;br&gt;
    
    </summary>
    
      <category term="Java虚拟机" scheme="http://yoursite.com/categories/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="Java虚拟机" scheme="http://yoursite.com/tags/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Java基础原理笔记(一)</title>
    <link href="http://yoursite.com/2016/09/10/Java%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2016/09/10/Java基础原理笔记（一）/</id>
    <published>2016-09-10T07:06:55.000Z</published>
    <updated>2017-05-10T11:16:31.297Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java基础原理笔记（一）"><a href="#Java基础原理笔记（一）" class="headerlink" title="Java基础原理笔记（一）"></a>Java基础原理笔记（一）</h1><h2 id="–Java数据类型介绍"><a href="#–Java数据类型介绍" class="headerlink" title="–Java数据类型介绍"></a>–Java数据类型介绍</h2><hr>
<p><strong>本章主要内容</strong></p>
<ul>
<li>数据类型分类</li>
<li>基本数据类型</li>
</ul>
<hr>
<h3 id="数据类型分类"><a href="#数据类型分类" class="headerlink" title="数据类型分类"></a>数据类型分类</h3><p>Java语言是强类型（strongly typed）语言，强类型包含两方面的含义：</p>
<ul>
<li>所有的变量必须先声明、后使用。</li>
<li>指定类型的变量只能接受类型与之匹配的值。</li>
</ul>
<p>在了解数据类型前先弄懂两个问题：</p>
<h4 id="什么是变量？变量有什么用？"><a href="#什么是变量？变量有什么用？" class="headerlink" title="什么是变量？变量有什么用？"></a>什么是变量？变量有什么用？</h4><p>　　 <strong>编程的本质，就是对内存中的数据的访问和修改</strong>。程序所用的数据都会保存在内存中，程序员需要一种机制来访问或修改内存中的数据。这种机制就是 <strong>变量</strong>。每个变量都代表某一小块内存，而且变量是有名字的，程序对变量赋值， <strong>实际上就是把数据装入该变量所代表的内存区的过程</strong>；<br>程序读取变量的值， <strong>实际上就是从该变量所代表的内存区中取值的过程</strong>。 <strong>变量相当于一个有名称的容器，该容器用于装各种不同类型的数据</strong>。<br><a id="more"></a></p>
<p>Java语言支持的类型分为两种： <strong>基本类型</strong>和 <strong>引用类型</strong>。</p>
<p><strong>基本类型</strong>包括Boolean类型和数值类型。数值类型有整数类型和浮点类型。</p>
<p>整数类型包括： <strong>byte</strong>、 <strong>short</strong>、 <strong>int</strong>、 <strong>long</strong>、 <strong>char</strong></p>
<p>浮点类型包括： <strong>float</strong>和 <strong>double</strong></p>
<p>注意：char代表字符型，实际上字符型也是一种 <strong>整数类型</strong>，相当于 <strong>无符号整数类型</strong>。</p>
<p><strong>引用类型</strong>包括 <strong>类、接口、数组类型</strong>，还有一种特殊的 <strong>null类型</strong>。</p>
<p>引用类型就是对一个对象的引用，对象包括实例和数组两种。实际上，引用类型变量就是一个指针。</p>
<h3 id="数据基本类型"><a href="#数据基本类型" class="headerlink" title="数据基本类型"></a>数据基本类型</h3><p><img src="http://oppqlui3e.bkt.clouddn.com/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png?imageView2/2/00/h/200/q/75|imageslim" alt=""></p>
<p>Java中只包含这八种基本类型， <strong>字符串不是基本数据类型</strong>，字符串是一个类，即为一个引用数据类型。</p>
<h4 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h4><p>int 是最常用的整数类型，因此直接给出一个整数值默认就是int类型。</p>
<p>如果直接将一个较小的整数值（在byte或short类型的表数范围内）赋给一个byte或short变量系统会自动把这个整数值当成byte/short类型来处理。但是使用一个很大的整数，Java不会把它当成long类型处理。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//系统不会把99999999999999999当成long类型处理,超出了int范围，引起错误</div><div class="line">long bg=99999999999999999;</div><div class="line">//应该在巨大整数值后使用L后缀，强制使用long类型</div><div class="line">long bg=99999999999999999L;</div></pre></td></tr></table></figure>
<h4 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h4><p>字符型值有三种表现形式</p>
<ul>
<li>通过单个字符指定字符型值，如’A’, ‘1’。</li>
<li>通过转义字符表示特殊字符型值，如’\n’、 ‘\t’。</li>
<li>直接用Unicode值来表示字符型值’\uXXXX’， 其中XXXX代表一个十六进制的整数。<br><img src="http://oppqlui3e.bkt.clouddn.com/%E5%B8%B8%E7%94%A8%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6.png?imageView2/2/w/700/h/200/q/75|imageslim" alt=""></li>
</ul>
<p><strong>什么是字符集？</strong></p>
<p>　　给所有字符的编号组成综合。早期只要一个字节（8位）即可支持256个字符编号，就是ASCII字符集。后来又为所有的书面语言字符进行统一编号，使用2个字节（16位）支持65536个字符，这就是Unicode字符集。</p>
<p>由于计算机底层保存字符时， <strong>实际保存该字符对应的编号</strong>，因此char类型的值可直接作为整形值来使用，它相当于一个16位无符号整数，范围是0~65535。可以参与数学运算。</p>
<p><strong>用法</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class CharTest</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		char xiang= &apos;\u9999&apos;;</div><div class="line">		//将输出&apos;香&apos;字</div><div class="line">		 System.out.println(xiang);</div><div class="line">		//直接把一个0~65535内的int整数赋给一个char变量</div><div class="line">		char a = 12;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h4><p>浮点型有两种： <strong>float、double</strong></p>
<p>它们有固定的表数范围和字段长度，字段长度和表数范围与机器无关，遵循IEEE754标准。采用 <strong>二进制</strong>数据的 <strong>科学计数法</strong>来表示浮点数。</p>
<p><strong>float型</strong></p>
<p>单精度浮点数，占4字节、32位</p>
<p>第1位是符号位，接下来8为表示指数，在接下来23为表示尾数</p>
<p><strong>double型</strong></p>
<p>双精度浮点数，占8字节、64位</p>
<p>第1位是符号位，接下来11为表示指数，在接下来52为表示尾数</p>
<p><strong>十进制形式</strong>：5.22、52.0 （必须包含一个小数点，否则会被当成int类型处理）</p>
<p><strong>科学计数法</strong>： 5.2e2 或 5.2E2 (即5.2*10^2)</p>
<p>Java中浮点类型默认为double型，如果希望把一个浮点类型值当做float型来处理应在这个浮点类型值后紧跟f或F。</p>
<p>Java中有三个特殊的浮点数值： <strong>正无穷大(POSITIVE_INFINITY)、负无穷大(NEGATIVE_INFINITY)、非数(NaN)</strong>。</p>
<p>正无穷大和正无穷大相等、负无穷大和负无穷大相等、NaN和谁都不相等（包括和NaN）。 <strong>只有浮点数</strong>除0才可以得到正负无穷大，因为Java会自动把浮点数运算的0当成0.0来处理，如果一个整数除以0，则会抛出异常：ArithmeticException：/by zero</p>
<h4 id="数值中使用下划线"><a href="#数值中使用下划线" class="headerlink" title="数值中使用下划线"></a>数值中使用下划线</h4><p>可以在任意数值中自由的使用下划线，通过下划线可以更直观的分辨数值中包含多少位。如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">int binVal = 0B1000_0000_0000_0000_0000_0000_0011;</div><div class="line">double pi = 3.14_15_926_53_59;</div></pre></td></tr></table></figure>
<h4 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h4><p>布尔型只有一个Boolean类型，用于表示逻辑上的“真”或“假”。值只能是 <strong>TRUE</strong>或 <strong>FALSE</strong>。其他的基本数据类型也不能转化成Boolean类型。</p>
<p>布尔类型主要用于流程控制</p>
<ul>
<li>if条件控制语句</li>
<li>while循环控制语句</li>
<li>do循环控制语句</li>
<li>for循环控制语句</li>
</ul>
<p>布尔类型的变量还可用在三目运算符（？：）中。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Java基础原理笔记（一）&quot;&gt;&lt;a href=&quot;#Java基础原理笔记（一）&quot; class=&quot;headerlink&quot; title=&quot;Java基础原理笔记（一）&quot;&gt;&lt;/a&gt;Java基础原理笔记（一）&lt;/h1&gt;&lt;h2 id=&quot;–Java数据类型介绍&quot;&gt;&lt;a href=&quot;#–Java数据类型介绍&quot; class=&quot;headerlink&quot; title=&quot;–Java数据类型介绍&quot;&gt;&lt;/a&gt;–Java数据类型介绍&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;本章主要内容&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据类型分类&lt;/li&gt;
&lt;li&gt;基本数据类型&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&quot;数据类型分类&quot;&gt;&lt;a href=&quot;#数据类型分类&quot; class=&quot;headerlink&quot; title=&quot;数据类型分类&quot;&gt;&lt;/a&gt;数据类型分类&lt;/h3&gt;&lt;p&gt;Java语言是强类型（strongly typed）语言，强类型包含两方面的含义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有的变量必须先声明、后使用。&lt;/li&gt;
&lt;li&gt;指定类型的变量只能接受类型与之匹配的值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在了解数据类型前先弄懂两个问题：&lt;/p&gt;
&lt;h4 id=&quot;什么是变量？变量有什么用？&quot;&gt;&lt;a href=&quot;#什么是变量？变量有什么用？&quot; class=&quot;headerlink&quot; title=&quot;什么是变量？变量有什么用？&quot;&gt;&lt;/a&gt;什么是变量？变量有什么用？&lt;/h4&gt;&lt;p&gt;　　 &lt;strong&gt;编程的本质，就是对内存中的数据的访问和修改&lt;/strong&gt;。程序所用的数据都会保存在内存中，程序员需要一种机制来访问或修改内存中的数据。这种机制就是 &lt;strong&gt;变量&lt;/strong&gt;。每个变量都代表某一小块内存，而且变量是有名字的，程序对变量赋值， &lt;strong&gt;实际上就是把数据装入该变量所代表的内存区的过程&lt;/strong&gt;；&lt;br&gt;程序读取变量的值， &lt;strong&gt;实际上就是从该变量所代表的内存区中取值的过程&lt;/strong&gt;。 &lt;strong&gt;变量相当于一个有名称的容器，该容器用于装各种不同类型的数据&lt;/strong&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="Java基础" scheme="http://yoursite.com/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="数据类型" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
</feed>
